#Q-1
def tower_hanoi(n,source,temporary,destination):
    if n==1:
        print("Move the disk 1 from", source,"to", destination)
    else:
        tower_hanoi(n-1,source,destination,temporary)
        print("Move the disk",n,"from",source,"to ",destination)#"%(n,source,destination))
        tower_hanoi(n-1,temporary,source,destination)
A= "source"
B = "temporary"
C = "destination"    
print(tower_hanoi(3,A,B,C))



#################################################################################################################################################################
#Q-2

def pascals_triangle(n):
    if n == 1:
        return [[1]] 
    else:
        result = pascals_triangle(n-1) 
        present_row = [1]
        previous_row = result[-1] 
        for i in range(len(previous_row)-1):
            present_row.append(previous_row[i] + previous_row[i+1])
        present_row += [1]
        result.append(present_row)
        return result

rows = int(input("Enter the number of rows: "))
pascal = pascals_triangle(rows)
for row in pascal:
    print(row)

#################################################################################################################################################################################
#Q-3

def quo_rem(integer1,integer2):
    r = divmod(integer1,integer2)
    return r
n1 = int(input("Enter first integer value: "))
n2 = int(input("Enter second integer value: "))

a = quo_rem(n1,n2)
print("Quotient and remainder of integer1 and integer2 are respectively: ",a)
#List = [q,r]
#print(List)


#Q3-a
quo_rem(n1,n2)
print(callable(quo_rem))

#Q3-b
#if all([])

#Q3-c
list = [a]
list.append(4)
list.append(5)
list.append(6)
print(list)
#print(filter(lambda x:x%4 == 1,2))


#Q3-d
datatype_set = set(list)
print("Above result  is converted to set datatype: ",datatype_set)

#Q3-e
immutable_set = frozenset(datatype_set)
print("Immutable set created: ",immutable_set)

#Q3-f
n1 = (a[0])
n2 = (a[1])
n3 = list[1]
n4 = list[2]
n5 = list[3]
LIST = [n1,n2,n3,n4,n5]
print(max(LIST))
#Finding out hash value
print(hash(max(LIST)))

##########################################################################################################################################################################################
#Q-4

class student:
    def __init__(self, name, roll_no):
        self.name = name
        self.roll_no = roll_no

    def getInfo(self):
        print(f"The name of the student is {self.name} and the roll number is {self.roll_no}")
        
    # Deleting object

    def __del__(self): 
        print("destructor called, student deleted.")
    
obj= student("name","21104072")
del obj

Abhishek = student("Abhishek", "21104072")
Varun = student("Varun", "21104073")
Suresh = student("Suresh", "21104074")
Rohit = student("Rohit", "21104075")
Abhishek.getInfo()
Varun.getInfo()
Suresh.getInfo()
Rohit.getInfo()

################################################################################################################################################################
#Q-5
from symtable import SymbolTableFactory


class Employee:
        count=0
        def __init__(self,serial_no, name, salary):
            self.serial_no=serial_no
            self.name=name 
            self.salary=salary
            Employee.count+=1
        def displayCount(self):
            print("There are %d employees" % Employee.count)
        def displayDetails(self):
            print( "Employee:", self.serial_no,"Name:", self.name,  "Salary:", self.salary)
E1=Employee(1,"Mehak" , 40000)
E2=Employee(2,"Ashok" , 50000)
E3=Employee(3,"Viren", 60000)
E3.displayCount()
print("Details of all employee:")
E1.displayDetails()
E2.displayDetails()
E3.displayDetails()

E1.salary = 70000
print("Updated record of Mehak:\n","Employee:",E1.serial_no,"Name: ",E1.name, "Salary:",E1.salary)


del E3

print(E3)
#########################################################################################################################################################################
#Q-6

